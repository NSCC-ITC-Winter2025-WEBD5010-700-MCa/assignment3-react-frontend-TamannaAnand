{
  "C:\\Users\\Anand\\OneDrive\\Desktop\\Personal\\Course Work\\WEBD5010\\assignment3-react-frontend-TamannaAnand\\Phase1\\serverless.yml": {
    "versionFramework": "4.6.3",
    "servicePath": "C:\\Users\\Anand\\OneDrive\\Desktop\\Personal\\Course Work\\WEBD5010\\assignment3-react-frontend-TamannaAnand\\Phase1\\serverless.yml",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "nscc123",
      "service": "Phase1",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "environment": {
          "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
        },
        "httpApi": {
          "cors": {
            "allowedOrigins": [
              "http://localhost:5173"
            ],
            "allowedMethods": [
              "GET",
              "POST",
              "DELETE",
              "PATCH"
            ],
            "allowedHeaders": [
              "Content-Type"
            ]
          }
        },
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "CreateLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Phase1-dev-create"
              }
            },
            "DeleteLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Phase1-dev-delete"
              }
            },
            "GetAllLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Phase1-dev-getAll"
              }
            },
            "GetOneLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Phase1-dev-getOne"
              }
            },
            "UpdateLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/Phase1-dev-update"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "Phase1",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Phase1-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Phase1-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "Phase1",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "CreateLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                  "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
                },
                "Handler": "createItemFunction/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Phase1-dev-create",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateLogGroup"
              ]
            },
            "DeleteLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                  "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
                },
                "Handler": "deleteItemFunction/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Phase1-dev-delete",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "DeleteLogGroup"
              ]
            },
            "GetAllLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                  "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
                },
                "Handler": "getAllItemsFunction/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Phase1-dev-getAll",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllLogGroup"
              ]
            },
            "GetOneLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                  "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
                },
                "Handler": "getOneItemFunction/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Phase1-dev-getOne",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetOneLogGroup"
              ]
            },
            "UpdateLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                  "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
                },
                "Handler": "updateItemFunction/index.handler",
                "Runtime": "nodejs20.x",
                "FunctionName": "Phase1-dev-update",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "UpdateLogGroup"
              ]
            },
            "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateLambdaFunction"
                },
                "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
              }
            },
            "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "DeleteLambdaFunction"
                },
                "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
              }
            },
            "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllLambdaFunction"
                },
                "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
              }
            },
            "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetOneLambdaFunction"
                },
                "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
              }
            },
            "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "UpdateLambdaFunction"
                },
                "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
              }
            },
            "HttpApi": {
              "Type": "AWS::ApiGatewayV2::Api",
              "Properties": {
                "Name": "dev-Phase1",
                "ProtocolType": "HTTP",
                "CorsConfiguration": {
                  "AllowCredentials": "<REDACTED>",
                  "AllowHeaders": [
                    "Content-Type"
                  ],
                  "AllowMethods": [
                    "GET",
                    "POST",
                    "DELETE",
                    "PATCH"
                  ],
                  "AllowOrigins": [
                    "http://localhost:5173"
                  ]
                }
              }
            },
            "HttpApiStage": {
              "Type": "AWS::ApiGatewayV2::Stage",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "StageName": "$default",
                "AutoDeploy": true,
                "DefaultRouteSettings": {
                  "DetailedMetricsEnabled": false
                }
              }
            },
            "CreateLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationCreate": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "CreateLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePostCreate": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "POST /create",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationCreate"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationCreate"
            },
            "DeleteLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "DeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationDelete": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "DeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteDeleteDelete": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "DELETE /delete",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationDelete"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationDelete"
            },
            "GetAllLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetAll": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetAllLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetGet": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /get",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetAll"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetAll"
            },
            "GetOneLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetOneLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationGetOne": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "GetOneLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRouteGetGetone": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "GET /getOne",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationGetOne"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationGetOne"
            },
            "UpdateLambdaPermissionHttpApi": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "UpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "HttpApi"
                      },
                      "/*"
                    ]
                  ]
                }
              }
            },
            "HttpApiIntegrationUpdate": {
              "Type": "AWS::ApiGatewayV2::Integration",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "IntegrationType": "AWS_PROXY",
                "IntegrationUri": {
                  "Fn::GetAtt": [
                    "UpdateLambdaFunction",
                    "Arn"
                  ]
                },
                "PayloadFormatVersion": "2.0",
                "TimeoutInMillis": 30000
              }
            },
            "HttpApiRoutePatchUpdate": {
              "Type": "AWS::ApiGatewayV2::Route",
              "Properties": {
                "ApiId": {
                  "Ref": "HttpApi"
                },
                "RouteKey": "PATCH /update",
                "Target": {
                  "Fn::Join": [
                    "/",
                    [
                      "integrations",
                      {
                        "Ref": "HttpApiIntegrationUpdate"
                      }
                    ]
                  ]
                }
              },
              "DependsOn": "HttpApiIntegrationUpdate"
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
              "Export": {
                "Name": "sls-Phase1-dev-ServerlessDeploymentBucketName"
              }
            },
            "CreateLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls"
              },
              "Export": {
                "Name": "sls-Phase1-dev-CreateLambdaFunctionQualifiedArn"
              }
            },
            "DeleteLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA"
              },
              "Export": {
                "Name": "sls-Phase1-dev-DeleteLambdaFunctionQualifiedArn"
              }
            },
            "GetAllLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso"
              },
              "Export": {
                "Name": "sls-Phase1-dev-GetAllLambdaFunctionQualifiedArn"
              }
            },
            "GetOneLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM"
              },
              "Export": {
                "Name": "sls-Phase1-dev-GetOneLambdaFunctionQualifiedArn"
              }
            },
            "UpdateLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI"
              },
              "Export": {
                "Name": "sls-Phase1-dev-UpdateLambdaFunctionQualifiedArn"
              }
            },
            "HttpApiId": {
              "Description": "Id of the HTTP API",
              "Value": {
                "Ref": "HttpApi"
              },
              "Export": {
                "Name": "sls-Phase1-dev-HttpApiId"
              }
            },
            "HttpApiUrl": {
              "Description": "URL of the HTTP API",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "HttpApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    }
                  ]
                ]
              },
              "Export": {
                "Name": "sls-Phase1-dev-HttpApiUrl"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "create": {
          "handler": "createItemFunction/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/create",
                "method": "post"
              },
              "resolvedMethod": "POST",
              "resolvedPath": "/create"
            }
          ],
          "name": "Phase1-dev-create",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls"
        },
        "delete": {
          "handler": "deleteItemFunction/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/delete",
                "method": "delete"
              },
              "resolvedMethod": "DELETE",
              "resolvedPath": "/delete"
            }
          ],
          "name": "Phase1-dev-delete",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA"
        },
        "getAll": {
          "handler": "getAllItemsFunction/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/get",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/get"
            }
          ],
          "name": "Phase1-dev-getAll",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso"
        },
        "getOne": {
          "handler": "getOneItemFunction/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/getOne",
                "method": "get"
              },
              "resolvedMethod": "GET",
              "resolvedPath": "/getOne"
            }
          ],
          "name": "Phase1-dev-getOne",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM"
        },
        "update": {
          "handler": "updateItemFunction/index.handler",
          "events": [
            {
              "httpApi": {
                "path": "/update",
                "method": "patch"
              },
              "resolvedMethod": "PATCH",
              "resolvedPath": "/update"
            }
          ],
          "name": "Phase1-dev-update",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs20.x",
          "vpc": {},
          "versionLogicalId": "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI"
        }
      }
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "environment": {
        "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
      },
      "httpApi": {
        "cors": {
          "allowedOrigins": [
            "http://localhost:5173"
          ],
          "allowedMethods": [
            "GET",
            "POST",
            "DELETE",
            "PATCH"
          ],
          "allowedHeaders": [
            "Content-Type"
          ]
        }
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "CreateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Phase1-dev-create"
            }
          },
          "DeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Phase1-dev-delete"
            }
          },
          "GetAllLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Phase1-dev-getAll"
            }
          },
          "GetOneLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Phase1-dev-getOne"
            }
          },
          "UpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/Phase1-dev-update"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "Phase1",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Phase1-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Phase1-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "Phase1",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
              },
              "Handler": "createItemFunction/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "Phase1-dev-create",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateLogGroup"
            ]
          },
          "DeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
              },
              "Handler": "deleteItemFunction/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "Phase1-dev-delete",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteLogGroup"
            ]
          },
          "GetAllLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
              },
              "Handler": "getAllItemsFunction/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "Phase1-dev-getAll",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllLogGroup"
            ]
          },
          "GetOneLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
              },
              "Handler": "getOneItemFunction/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "Phase1-dev-getOne",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOneLogGroup"
            ]
          },
          "UpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
                "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
              },
              "Handler": "updateItemFunction/index.handler",
              "Runtime": "nodejs20.x",
              "FunctionName": "Phase1-dev-update",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateLogGroup"
            ]
          },
          "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateLambdaFunction"
              },
              "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
            }
          },
          "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteLambdaFunction"
              },
              "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
            }
          },
          "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllLambdaFunction"
              },
              "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
            }
          },
          "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOneLambdaFunction"
              },
              "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
            }
          },
          "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateLambdaFunction"
              },
              "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-Phase1",
              "ProtocolType": "HTTP",
              "CorsConfiguration": {
                "AllowCredentials": "<REDACTED>",
                "AllowHeaders": [
                  "Content-Type"
                ],
                "AllowMethods": [
                  "GET",
                  "POST",
                  "DELETE",
                  "PATCH"
                ],
                "AllowOrigins": [
                  "http://localhost:5173"
                ]
              }
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "CreateLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCreate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /create",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreate"
          },
          "DeleteLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationDelete": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "DeleteLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteDeleteDelete": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "DELETE /delete",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationDelete"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationDelete"
          },
          "GetAllLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAll": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetAllLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /get",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAll"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAll"
          },
          "GetOneLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOneLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetOne": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "GetOneLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetGetone": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /getOne",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetOne"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetOne"
          },
          "UpdateLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationUpdate": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::GetAtt": [
                  "UpdateLambdaFunction",
                  "Arn"
                ]
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePatchUpdate": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "PATCH /update",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationUpdate"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationUpdate"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
            "Export": {
              "Name": "sls-Phase1-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls"
            },
            "Export": {
              "Name": "sls-Phase1-dev-CreateLambdaFunctionQualifiedArn"
            }
          },
          "DeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA"
            },
            "Export": {
              "Name": "sls-Phase1-dev-DeleteLambdaFunctionQualifiedArn"
            }
          },
          "GetAllLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso"
            },
            "Export": {
              "Name": "sls-Phase1-dev-GetAllLambdaFunctionQualifiedArn"
            }
          },
          "GetOneLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM"
            },
            "Export": {
              "Name": "sls-Phase1-dev-GetOneLambdaFunctionQualifiedArn"
            }
          },
          "UpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI"
            },
            "Export": {
              "Name": "sls-Phase1-dev-UpdateLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-Phase1-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-Phase1-dev-HttpApiUrl"
            }
          }
        }
      },
      "vpc": {}
    },
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "serviceRawFile": "org: nscc123 # The Serverless org ID (org in the Serverless Framework)\r\nservice: Phase1 # The service name (project name)\r\n\r\nprovider:\r\n  name: aws # Provider is AWS\r\n  runtime: nodejs20.x # Runtime environment for Lambda functions\r\n  environment:\r\n    MONGODB_URI: mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\r\n  httpApi:\r\n    cors:\r\n      allowedOrigins:\r\n        - http://localhost:5173\r\n      allowedMethods:\r\n        - GET\r\n        - POST\r\n        - DELETE\r\n        - PATCH\r\n      allowedHeaders:\r\n        - Content-Type\r\n\r\nfunctions:\r\n  create:\r\n    handler: createItemFunction/index.handler # Path to 'create' function handler\r\n    events:\r\n      - httpApi: # Define HTTP API event for the 'create' function\r\n          path: /create\r\n          method: post\r\n\r\n  delete:\r\n    handler: deleteItemFunction/index.handler # Path to 'delete' function handler\r\n    events:\r\n      - httpApi: # Define HTTP API event for the 'delete' function\r\n          path: /delete\r\n          method: delete\r\n\r\n  getAll:\r\n    handler: getAllItemsFunction/index.handler # Path to 'getAll' function handler\r\n    events:\r\n      - httpApi: # Define HTTP API event for the 'getAll' function\r\n          path: /get\r\n          method: get\r\n\r\n  getOne:\r\n    handler: getOneItemFunction/index.handler # Path to 'getOne' function handler\r\n    events:\r\n      - httpApi: # Define HTTP API event for the 'getOne' function\r\n          path: /getOne\r\n          method: get\r\n\r\n  update:\r\n    handler: updateItemFunction/index.handler # Path to 'update' function handler\r\n    events:\r\n      - httpApi: # Define HTTP API event for the 'update' function\r\n          path: /update\r\n          method: patch\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "orgId": "9ee8cf3a-c497-4c97-8db5-bac4c596c447",
    "orgName": "nscc123",
    "userId": "TGpYqWVsmcVTQDC0WM",
    "userName": "nscc123",
    "serviceProviderAwsAccountId": "156041424992",
    "serviceProviderAwsCfStackName": "Phase1-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:156041424992:stack/Phase1-dev/9eb03320-da6e-11ef-9619-0afffd03a6d5",
    "serviceProviderAwsCfStackCreated": "2025-01-24T16:16:51.648Z",
    "serviceProviderAwsCfStackUpdated": "2025-02-19T17:41:55.185Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetOneLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:156041424992:function:Phase1-dev-getOne:22",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Phase1-dev-GetOneLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:156041424992:function:Phase1-dev-getAll:22",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Phase1-dev-GetAllLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "DeleteLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:156041424992:function:Phase1-dev-delete:38",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Phase1-dev-DeleteLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:156041424992:function:Phase1-dev-create:38",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Phase1-dev-CreateLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "UpdateLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:156041424992:function:Phase1-dev-update:38",
        "Description": "Current Lambda function version",
        "ExportName": "sls-Phase1-dev-UpdateLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "HttpApiId",
        "OutputValue": "36sjcqdtk5",
        "Description": "Id of the HTTP API",
        "ExportName": "sls-Phase1-dev-HttpApiId"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
        "ExportName": "sls-Phase1-dev-ServerlessDeploymentBucketName"
      },
      {
        "OutputKey": "HttpApiUrl",
        "OutputValue": "https://36sjcqdtk5.execute-api.us-east-1.amazonaws.com",
        "Description": "URL of the HTTP API",
        "ExportName": "sls-Phase1-dev-HttpApiUrl"
      }
    ],
    "compiledCloudFormationTemplate": {
      "AWSTemplateFormatVersion": "2010-09-09",
      "Description": "The AWS CloudFormation template for this Serverless application",
      "Resources": {
        "CreateLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/Phase1-dev-create"
          }
        },
        "DeleteLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/Phase1-dev-delete"
          }
        },
        "GetAllLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/Phase1-dev-getAll"
          }
        },
        "GetOneLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/Phase1-dev-getOne"
          }
        },
        "UpdateLogGroup": {
          "Type": "AWS::Logs::LogGroup",
          "Properties": {
            "LogGroupName": "/aws/lambda/Phase1-dev-update"
          }
        },
        "IamRoleLambdaExecution": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "Phase1",
                      "dev",
                      "lambda"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogStream",
                        "logs:CreateLogGroup",
                        "logs:TagResource"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Phase1-dev*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Phase1-dev*:*:*"
                        }
                      ]
                    }
                  ]
                }
              }
            ],
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "Phase1",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "lambdaRole"
                ]
              ]
            }
          }
        },
        "CreateLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
              "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
            },
            "Handler": "createItemFunction/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "Phase1-dev-create",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "CreateLogGroup"
          ]
        },
        "DeleteLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
              "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
            },
            "Handler": "deleteItemFunction/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "Phase1-dev-delete",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "DeleteLogGroup"
          ]
        },
        "GetAllLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
              "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
            },
            "Handler": "getAllItemsFunction/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "Phase1-dev-getAll",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetAllLogGroup"
          ]
        },
        "GetOneLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
              "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
            },
            "Handler": "getOneItemFunction/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "Phase1-dev-getOne",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "GetOneLogGroup"
          ]
        },
        "UpdateLambdaFunction": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Code": {
              "S3Bucket": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
              "S3Key": "serverless/Phase1/dev/1739987102407-2025-02-19T17:45:02.407Z/Phase1.zip"
            },
            "Handler": "updateItemFunction/index.handler",
            "Runtime": "nodejs20.x",
            "FunctionName": "Phase1-dev-update",
            "MemorySize": 1024,
            "Timeout": 6,
            "Environment": {
              "Variables": {
                "MONGODB_URI": "mongodb+srv://anandtamanna9:wgLz8akLFmxyqpBw@cluster0.xuga9.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
              }
            },
            "Role": {
              "Fn::GetAtt": [
                "IamRoleLambdaExecution",
                "Arn"
              ]
            }
          },
          "DependsOn": [
            "UpdateLogGroup"
          ]
        },
        "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "CreateLambdaFunction"
            },
            "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
          }
        },
        "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "DeleteLambdaFunction"
            },
            "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
          }
        },
        "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetAllLambdaFunction"
            },
            "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
          }
        },
        "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "GetOneLambdaFunction"
            },
            "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
          }
        },
        "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI": {
          "Type": "AWS::Lambda::Version",
          "DeletionPolicy": "Retain",
          "Properties": {
            "FunctionName": {
              "Ref": "UpdateLambdaFunction"
            },
            "CodeSha256": "k5yePE6i/JEaOQ4RE1HJB8oRsTUHRSM75tSIimPEuzI="
          }
        },
        "HttpApi": {
          "Type": "AWS::ApiGatewayV2::Api",
          "Properties": {
            "Name": "dev-Phase1",
            "ProtocolType": "HTTP",
            "CorsConfiguration": {
              "AllowHeaders": [
                "Content-Type"
              ],
              "AllowMethods": [
                "GET",
                "POST",
                "DELETE",
                "PATCH"
              ],
              "AllowOrigins": [
                "http://localhost:5173"
              ]
            }
          }
        },
        "HttpApiStage": {
          "Type": "AWS::ApiGatewayV2::Stage",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "StageName": "$default",
            "AutoDeploy": true,
            "DefaultRouteSettings": {
              "DetailedMetricsEnabled": false
            }
          }
        },
        "CreateLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "CreateLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationCreate": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "CreateLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePostCreate": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "POST /create",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationCreate"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationCreate"
        },
        "DeleteLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "DeleteLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationDelete": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "DeleteLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteDeleteDelete": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "DELETE /delete",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationDelete"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationDelete"
        },
        "GetAllLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetAllLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetAll": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetAllLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetGet": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /get",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetAll"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetAll"
        },
        "GetOneLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "GetOneLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationGetOne": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "GetOneLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRouteGetGetone": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "GET /getOne",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationGetOne"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationGetOne"
        },
        "UpdateLambdaPermissionHttpApi": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "UpdateLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition"
                  },
                  ":execute-api:",
                  {
                    "Ref": "AWS::Region"
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId"
                  },
                  ":",
                  {
                    "Ref": "HttpApi"
                  },
                  "/*"
                ]
              ]
            }
          }
        },
        "HttpApiIntegrationUpdate": {
          "Type": "AWS::ApiGatewayV2::Integration",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "IntegrationType": "AWS_PROXY",
            "IntegrationUri": {
              "Fn::GetAtt": [
                "UpdateLambdaFunction",
                "Arn"
              ]
            },
            "PayloadFormatVersion": "2.0",
            "TimeoutInMillis": 30000
          }
        },
        "HttpApiRoutePatchUpdate": {
          "Type": "AWS::ApiGatewayV2::Route",
          "Properties": {
            "ApiId": {
              "Ref": "HttpApi"
            },
            "RouteKey": "PATCH /update",
            "Target": {
              "Fn::Join": [
                "/",
                [
                  "integrations",
                  {
                    "Ref": "HttpApiIntegrationUpdate"
                  }
                ]
              ]
            }
          },
          "DependsOn": "HttpApiIntegrationUpdate"
        }
      },
      "Outputs": {
        "ServerlessDeploymentBucketName": {
          "Value": "serverless-framework-deployments-us-east-1-ebf1a3db-45cb",
          "Export": {
            "Name": "sls-Phase1-dev-ServerlessDeploymentBucketName"
          }
        },
        "CreateLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "CreateLambdaVersionTLZO524rfqfoCeJSPmUUHEHIkoMDOAixMUFlYPY6Ls"
          },
          "Export": {
            "Name": "sls-Phase1-dev-CreateLambdaFunctionQualifiedArn"
          }
        },
        "DeleteLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "DeleteLambdaVersionkVzjuySStrylKJiM12OVgJ4wbIxIQbMYYwjIm6CYA"
          },
          "Export": {
            "Name": "sls-Phase1-dev-DeleteLambdaFunctionQualifiedArn"
          }
        },
        "GetAllLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetAllLambdaVersionG8ojjaUvUUcCycPkwZSgWwQ5Ifla2Oucp1Zq6Gkso"
          },
          "Export": {
            "Name": "sls-Phase1-dev-GetAllLambdaFunctionQualifiedArn"
          }
        },
        "GetOneLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "GetOneLambdaVersionJNkzF4B2BJzeIxyJzHm0hWTGfXmvr0LpfsoFTBsVdM"
          },
          "Export": {
            "Name": "sls-Phase1-dev-GetOneLambdaFunctionQualifiedArn"
          }
        },
        "UpdateLambdaFunctionQualifiedArn": {
          "Description": "Current Lambda function version",
          "Value": {
            "Ref": "UpdateLambdaVersionNFEnalP3zc04YjvLjnrABStYVNNkNxd0JfYrYcCZQI"
          },
          "Export": {
            "Name": "sls-Phase1-dev-UpdateLambdaFunctionQualifiedArn"
          }
        },
        "HttpApiId": {
          "Description": "Id of the HTTP API",
          "Value": {
            "Ref": "HttpApi"
          },
          "Export": {
            "Name": "sls-Phase1-dev-HttpApiId"
          }
        },
        "HttpApiUrl": {
          "Description": "URL of the HTTP API",
          "Value": {
            "Fn::Join": [
              "",
              [
                "https://",
                {
                  "Ref": "HttpApi"
                },
                ".execute-api.",
                {
                  "Ref": "AWS::Region"
                },
                ".",
                {
                  "Ref": "AWS::URLSuffix"
                }
              ]
            ]
          },
          "Export": {
            "Name": "sls-Phase1-dev-HttpApiUrl"
          }
        }
      }
    }
  }
}